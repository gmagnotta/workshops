---
#
# Playbook to create an installation of Tomcat
#
- name: Deploy 3scale in OpenShift cluster
  hosts: localhost
  vars:
    project: "hello-tomcat"
  tasks:

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: jws56-openjdk11-openshift-rhel8
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true
            tags:
            - annotations:
                description: Red Hat JBoss WS 5.6 Image
              from:
                kind: DockerImage
                name: registry.redhat.io/jboss-webserver-5/jws56-openjdk11-openshift-rhel8
              name: latest
              referencePolicy:
                type: Local
    
    - name: Create Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: hello-tomcat
              template: hello-tomcat
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            ports:
            - name: 8080-tcp
              port: 8080
              protocol: TCP
              targetPort: 8080
            - name: 8778-tcp
              port: 8778
              protocol: TCP
              targetPort: 8778
            selector:
              app: hello-tomcat
            sessionAffinity: None
            type: ClusterIP

    - name: Create Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              description: The service for tomcat cluster membership.
              service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
            labels:
              app: hello-tomcat
              template: hello-tomcat
            name: hello-tomcat-ping
            namespace: "{{ project }}"
          spec:
            clusterIP: None
            ports:
            - name: 8888-tcp
              port: 8888
              protocol: TCP
              targetPort: 8888
            - name: 4000-tcp
              port: 4000
              protocol: TCP
              targetPort: 4000
            publishNotReadyAddresses: false
            selector:
              app: hello-tomcat

    - name: Create Deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: hello-tomcat
              template: hello-tomcat
              app.kubernetes.io/name: hello-tomcat
              app.kubernetes.io/part-of: hello-tomcat
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            progressDeadlineSeconds: 600
            replicas: 1
            revisionHistoryLimit: 10
            selector:
              matchLabels:
                app: hello-tomcat
            strategy:
              rollingUpdate:
                maxSurge: 25%
                maxUnavailable: 25%
              type: RollingUpdate
            template:
              metadata:
                annotations:
                  gitcommit: first deploy
                  kubernetes.io/change-cause: first deploy
                labels:
                  app: hello-tomcat
              spec:
                containers:
                - env:
                  - name: DNS_MEMBERSHIP_SERVICE_NAME
                    value: hello-tomcat-ping
                  image: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-tomcat"
                  imagePullPolicy: IfNotPresent
                  livenessProbe:
                    exec:
                      command:
                      - /bin/bash
                      - -c
                      - 'curl --noproxy ''*'' -is ''http://localhost:8080/health'' | grep -iq ''"status": "UP"'''
                  name: hello-tomcat
                  ports:
                  - containerPort: 8080
                    protocol: TCP
                  - containerPort: 8778
                    protocol: TCP
                  - containerPort: 8888
                    protocol: TCP
                  - containerPort: 4000
                    protocol: TCP
                  readinessProbe:
                    exec:
                      command:
                      - /bin/bash
                      - -c
                      - curl --noproxy '*' -is 'http://localhost:8080/' | head -1 | grep -iq 'HTTP/1.1 200'
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 512Mi
                    requests:
                      cpu: 500m
                      memory: 128Mi
                dnsPolicy: ClusterFirst
                restartPolicy: Always
                schedulerName: default-scheduler
                securityContext: {}
                terminationGracePeriodSeconds: 60

    - name: Create Route
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              app: hello-tomcat
              template: hello-tomcat
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            port:
              targetPort: 8080-tcp
            to:
              kind: Service
              name: hello-tomcat
              weight: 100
            wildcardPolicy: None

    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create Pipeline
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          metadata:
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            params:
              - name: repo-url
            workspaces:
              - name: src
              - name: env
              - name: secureenv
              - name: artifacts
            tasks:
              - name: fetch-repository
                taskRef:
                  name: git-clone
                  kind: ClusterTask
                workspaces:
                  - name: output
                    workspace: src
                params:
                  - name: url
                    value: $(params.repo-url)
                  - name: deleteExisting
                    value: "true"
              - name: build
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/jws56-openjdk11-openshift-rhel8"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-tomcat:latest"
                  - name: PATH_CONTEXT
                    value: "hello-tomcat"
                  - name: INCREMENTAL
                    value: "true"