---
#
# Playbook to create a Tekton Pipeline for hello-tomcat project
#
- name: Deploy Tomcat in OpenShift cluster
  hosts: localhost
  vars:
    project: "hello-tomcat"
    webhook_password: "mywebhookpassword"
  tasks:

    - name: Link secret to pipeline
      command: "oc secrets link pipeline redhatregistryio -n {{ project }}"

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: jws56-openjdk11-openshift-rhel8
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true
            tags:
            - annotations:
                description: Red Hat JBoss WS 5.6 Image
              from:
                kind: DockerImage
                name: registry.redhat.io/jboss-webserver-5/jws56-openjdk11-openshift-rhel8
              name: latest
              referencePolicy:
                type: Local
    
    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create Pipeline
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          metadata:
            name: hello-tomcat
            namespace: "{{ project }}"
          spec:
            params:
              - name: repo-url
            workspaces:
              - name: src
              - name: env
              - name: secureenv
              - name: artifacts
            tasks:
              - name: fetch-repository
                taskRef:
                  name: git-clone
                  kind: ClusterTask
                workspaces:
                  - name: output
                    workspace: src
                params:
                  - name: url
                    value: $(params.repo-url)
                  - name: deleteExisting
                    value: "true"
              - name: build
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/jws56-openjdk11-openshift-rhel8"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-tomcat"
                  - name: PATH_CONTEXT
                    value: "hello-tomcat"
                  - name: INCREMENTAL
                    value: "true"
              - name: deploy
                taskRef:
                  name: openshift-client
                  kind: ClusterTask
                runAfter:
                  - build
                workspaces:
                  - name: manifest-dir
                    workspace: src
                params:
                  - name: SCRIPT
                    value: |
                      cd $(workspaces.manifest-dir.path)/hello-tomcat/k8s/overlay/dev
                      
                      cat <<EOF > kustomization.yaml
                      apiVersion: kustomize.config.k8s.io/v1beta1
                      kind: Kustomization

                      resources:
                      - ../../base
                      images:
                      - name: hello-tomcat
                        newName: $(tasks.build.results.IMAGE_URL)@$(tasks.build.results.IMAGE_DIGEST)
                      EOF

                      oc apply -k .

    - name: Create TriggerBinding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: TriggerBinding
          metadata:
            name: event-binding
            namespace: "{{ project }}"
          spec:
            params:
              - name: git-repository-url
                value: $(body.repository.url) # use $(body.repository.clone_url) for gitea see https://docs.gitea.com/usage/webhooks#event-information

    - name: Create TriggerTemplate
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: TriggerTemplate
          metadata:
            name: push-trigger-template
            namespace: "{{ project }}"
          spec:
            params:
            - name: git-repository-url
              description: The git repository url
            resourcetemplates:
            - apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                generateName: hello-tomcat-
              spec:
                params:
                  - name: repo-url
                    value: 'https://github.com/gmagnotta/examples'
                pipelineRef:
                  name: hello-tomcat
                workspaces:
                  - name: src
                    volumeClaimTemplate:
                      spec:
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: 1Gi
                        storageClassName: ocs-external-storagecluster-ceph-rbd
                        volumeMode: Filesystem
                      status: {}
                  - emptyDir: {}
                    name: env
                  - emptyDir: {}
                    name: secureenv
                  - name: artifacts
                    volumeClaimTemplate:
                      spec:
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: 1Gi
                        storageClassName: ocs-external-storagecluster-ceph-rbd
                        volumeMode: Filesystem
                      status: {}

    - name: Create EventListener
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: EventListener
          metadata:
            name: listener
            namespace: "{{ project }}"
          spec:
            serviceAccountName: pipeline
            triggers:
              - name: trigger
                interceptors:
                  - ref:
                      name: "github"
                      kind: ClusterInterceptor
                      apiVersion: triggers.tekton.dev
                    params:
                    - name: "secretRef"
                      value:
                        secretName: git-secret
                        secretKey: secretToken
                    - name: "eventTypes"
                      value: ["push"]
                bindings:
                  - ref: event-binding    
                template:
                  ref: push-trigger-template

    - name: Create Secret
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: git-secret
            namespace: "{{ project }}"
          data:
            secretToken: "{{ webhook_password | b64encode }}"

    - name: Create Route
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              app.kubernetes.io/managed-by: EventListener
              app.kubernetes.io/part-of: Triggers
              eventlistener: listener
            name: el-listener
            namespace: "{{ project }}"
          spec:
            port:
              targetPort: http-listener
            to:
              kind: Service
              name: el-listener
              weight: 100