---
#
# Playbook to create an installation of 3scale that uses S3 as file storage
#

# https://access.redhat.com/documentation/en-us/red_hat_openshift_container_storage/4.6/html/managing_hybrid_and_multicloud_resources/object-bucket-claim
# https://github.com/pittar/3scale-noobaa

- name: Deploy 3scale in OpenShift cluster
  hosts: localhost
  vars:
    project: "3scale"
    wildcard_domain: "apps.localdomain"
    sso_server: "sso-ingress.sso.localdomain"
    s3_server: "s3.openshift-storage.svc.cluster.local"
  tasks:

    - name: Create Subscription
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: 3scale-operator
            namespace: "{{ project }}"
          spec:
            channel: threescale-2.13
            name: 3scale-operator
            installPlanApproval: Automatic
            source: redhat-operators
            sourceNamespace: openshift-marketplace
            #startingCSV: 3scale-operator.v0.10.5

    - name: Create S3 Bucket
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: objectbucket.io/v1alpha1
          kind: ObjectBucketClaim
          metadata:
            name: 3scale-obc
            namespace: "{{ project }}"
          spec:
            generateBucketName: 3scale
            storageClassName: openshift-storage.noobaa.io

    - name: Wait for Bucket creation
      kubernetes.core.k8s_info:
        api_version: objectbucket.io/v1alpha1
        kind: ObjectBucketClaim
        name: 3scale-obc
        namespace: "{{ project }}"
      register: result
      until: result.resources[0].status.phase == "Bound"
      retries: 5
      delay: 10

    - name: Extract AWS_ACCESS_KEY_ID
      command: "oc get secret 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.AWS_ACCESS_KEY_ID|base64decode{{ '}}' }}\""
      register: aws_access_key_id 
    - name: Print value
      ansible.builtin.debug:
        msg: "AWS_ACCESS_KEY_ID={{ aws_access_key_id.stdout }}"

    - name: Extract AWS_SECRET_ACCESS_KEY
      command: "oc get secret 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.AWS_SECRET_ACCESS_KEY|base64decode{{ '}}' }}\""
      register: aws_secret_access_key
    - name: Print value
      ansible.builtin.debug:
        msg: "AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key.stdout }}"

    - name: Extract BUCKET_HOST
      command: "oc get configmap 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.BUCKET_HOST{{ '}}' }}\""
      register: bucket_host
    - name: Print value
      ansible.builtin.debug:
        msg: "BUCKET_HOST={{ bucket_host.stdout }}"

    - name: Extract BUCKET_NAME
      command: "oc get configmap 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.BUCKET_NAME{{ '}}' }}\""
      register: bucket_name
    - name: Print value
      ansible.builtin.debug:
        msg: "BUCKET_NAME={{ bucket_name.stdout }}"
    
    - name: Extract BUCKET_PORT
      command: "oc get configmap 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.BUCKET_PORT{{ '}}' }}\""
      register: bucket_port
    - name: Print value
      ansible.builtin.debug:
        msg: "BUCKET_PORT={{ bucket_port.stdout }}"

    - name: Create S3 Secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: 3scale-s3-auth
            namespace: "{{ project }}"
          data:
            AWS_ACCESS_KEY_ID: "{{ aws_access_key_id.stdout | b64encode }}"
            AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key.stdout | b64encode }}"
            AWS_BUCKET: "{{ bucket_name.stdout | b64encode }}"
            AWS_REGION: "bm9vYmFh"
            AWS_HOSTNAME: "{{ bucket_host.stdout | b64encode }}"
            AWS_PROTOCOL: "SFRUUFM="
            AWS_PATH_STYLE: "dHJ1ZQ=="

    - name: Search for 3scale operator pod
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "control-plane = controller-manager"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    # - name: Wait for Operator Installation
    #   ansible.builtin.pause:
    #     minutes: 5
    #     prompt: "check that operator is installed"

    - name: Create APIManager
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps.3scale.net/v1alpha1
          kind: APIManager
          metadata:
            name: apimanager-sample
            namespace: "{{ project }}"
          spec:
            system:
              appSpec:
                replicas: 1
              sidekiqSpec:
                replicas: 1
              fileStorage:
                simpleStorageService:
                  configurationSecretRef:
                    name: 3scale-s3-auth
            zync:
              appSpec:
                replicas: 1
              queSpec:
                replicas: 1
            backend:
              cronSpec:
                replicas: 1
              listenerSpec:
                replicas: 1
              workerSpec:
                replicas: 1
            apicast:
              productionSpec:
                replicas: 1
              stagingSpec:
                replicas: 1
            wildcardDomain: "{{ wildcard_domain }}"
            resourceRequirementsEnabled: false
            monitoring:
              enabled: true
    
    - name: Wait for installation
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: system-seed
        namespace: "{{ project }}"
        wait: yes
        wait_sleep: 10
        wait_timeout: 360
      register: result
      until: result.api_found == true
      retries: 5
      delay: 10

    - name: Extract ADMIN PORTAL USER
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.ADMIN_USER|base64decode{{ '}}' }}\""
      register: admin_user
    - name: Print value
      ansible.builtin.debug:
        msg: "ADMIN_USER={{ admin_user.stdout }}"
    
    - name: Extract ADMIN PORTAL PASSWORD
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.ADMIN_PASSWORD|base64decode{{ '}}' }}\""
      register: admin_password
    - name: Print value
      ansible.builtin.debug:
        msg: "ADMIN_PASSWORD={{ admin_password.stdout }}"

    - name: Extract MASTER ADMIN USER
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.MASTER_USER|base64decode{{ '}}' }}\""
      register: master_user
    - name: Print value
      ansible.builtin.debug:
        msg: "MASTER_USER={{ master_user.stdout }}"
    
    - name: Extract MASTER ADMIN PASSWORD
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.MASTER_PASSWORD|base64decode{{ '}}' }}\""
      register: master_password
    - name: Print value
      ansible.builtin.debug:
        msg: "MASTER_PASSWORD={{ master_password.stdout }}"


    # - name: Wait for Initialization
    #   ansible.builtin.pause:
    #     minutes: 5
    #     prompt: "Wait for initialization"

    - name: Search for Zync-que
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = zync-que"
          - "threescale_component_element = zync-que"
          - "threescale_component = zync"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    - name: Export PEM Cert from SSO
      shell: /usr/bin/openssl s_client -showcerts -connect {{ sso_server }}:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >sso.pem

    - name: Export Zync PEM
      shell: oc exec dc/zync-que -n {{ project }} -- cat /etc/pki/tls/cert.pem > zync.pem

    - name: Append PEM to Zync PEM
      shell: cat sso.pem >> zync.pem

    - name: Import updated Zync PEM
      command: oc create configmap zync-ca-bundle -n {{ project }} --from-file=./zync.pem

    - name: Modify dc/zync-que
      command: oc set volume dc/zync-que -n {{ project }} --add --name=zync-ca-bundle --mount-path /etc/pki/tls/zync/zync.pem --sub-path zync.pem --source='{"configMap":{"name":"zync-ca-bundle","items":[{"key":"zync.pem","path":"zync.pem"}]}}'

    - name: Search for Zync-que
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = zync-que"
          - "threescale_component_element = zync-que"
          - "threescale_component = zync"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    - name: Modify dc/zync-que
      command: oc set env dc/zync-que -n {{ project }} SSL_CERT_FILE=/etc/pki/tls/zync/zync.pem

# https://access.redhat.com/solutions/6980338

    - name: Search for Zync-que
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = zync-que"
          - "threescale_component_element = zync-que"
          - "threescale_component = zync"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    - name: Export PEM Cert from S3
      shell: oc rsh -n {{ project }} dc/zync-que  echo -n | openssl s_client -connect {{ s3_server }}:443 -servername {{ s3_server }} --showcerts | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/S3Certs.pem 2>/dev/null

    # - name: Copy PEM Cert locally
    #   shell: oc rsh -n {{ project }} dc/zync-que cat /tmp/S3Certs.pem > S3Certs.pem 2>/dev/null

    - name: Search for System-sidekiq
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = system-sidekiq"
          - "threescale_component_element = sidekiq"
          - "threescale_component = system"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    - name: Export Original Sidekiq PEM Cert
      shell: oc rsh -n {{ project }} -c system-sidekiq dc/system-sidekiq cat /etc/pki/tls/cert.pem > SidekiqCerts.pem 2>/dev/null

    - name: Append custom cert to Sidekiq cert
      shell: cat S3Certs.pem >> SidekiqCerts.pem

    - name: Create configmap
      shell: oc create configmap sidekiqcerts -n {{ project }} --from-file=./SidekiqCerts.pem

    - name: Set volume from configmap
      shell: oc set volume dc/system-sidekiq -n {{ project }} --add --overwrite --name=customcerts --mount-path=/etc/pki/tls/custom/SidekiqCerts.pem --sub-path=SidekiqCerts.pem --source='{"configMap":{"name":"sidekiqcerts"}}'

    - name: Search for System-sidekiq
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = system-sidekiq"
          - "threescale_component_element = sidekiq"
          - "threescale_component = system"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    - name: Set Env for sidekiq
      shell: oc set env dc/system-sidekiq -n {{ project }} SSL_CERT_FILE=/etc/pki/tls/custom/SidekiqCerts.pem


    - name: Search for System-app
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = system-app"
          - "threescale_component_element = app"
          - "threescale_component = system"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10
    
    - name: Copy locally systemdeveloper certificate
      shell: oc rsh -n {{ project }} -c system-developer dc/system-app cat /etc/pki/tls/cert.pem > SystemAppCerts.pem 2>/dev/null

    - name: Append custom cert to systemdeveloper cert
      shell: cat S3Certs.pem >> SystemAppCerts.pem

    - name: Create configmap
      shell: oc create configmap systemappcerts -n {{ project }} --from-file=./SystemAppCerts.pem

    - name: Set volume for system-app
      shell: oc set volume dc/system-app -n {{ project }} --add --overwrite --name=customcerts --mount-path=/etc/pki/tls/custom/SystemAppCerts.pem --sub-path=SystemAppCerts.pem --source='{"configMap":{"name":"systemappcerts"}}'

    - name: Search for System-app
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "app = 3scale-api-management"
          - "deploymentconfig = system-app"
          - "threescale_component_element = app"
          - "threescale_component = system"
      register: pod_list
      until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
      retries: 10
      delay: 10

    - name: Set ENV for system-app
      shell: oc set env dc/system-app -n {{ project }} SSL_CERT_FILE=/etc/pki/tls/custom/SystemAppCerts.pem