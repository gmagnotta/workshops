---
#
# Playbook to create an installation of kafka
#
# see https://github.com/strimzi/strimzi-kafka-operator/blob/main/examples/security/tls-auth/connect.yaml
#
- name: OCP Login
  hosts: localhost
  vars_files:
    - variables.yml
  tasks:
    - name: Check ocp credential exists
      ansible.builtin.assert:
        that:
          - ocp_url is defined
          - ocp_url != ""
          - ocp_username is defined
          - ocp_username != ""
          - ocp_password is defined
          - ocp_password != ""
        fail_msg: "ocp credentials not valid, export the correct values"
    
    - name: login to openshift
      ansible.builtin.command: oc login {{ ocp_url }} -u {{ ocp_username }} -p {{ ocp_password }} --insecure-skip-tls-verify=true
      register: ocp_login_result
      changed_when: false

    - name: Check if oc login succeeded
      ansible.builtin.fail:
        msg: "oc login failed!"
      when: ocp_login_result.rc != 0

- name: Create Project
  hosts: localhost
  vars_files:
    - variables.yml
  vars:
    create_operator_group: true
  roles:
    - gmagnotta.ocp.project

- name: Deploy kafka in OpenShift cluster
  hosts: localhost
  vars_files:
    - variables.yml
  tasks:

    - name: Create Subscription
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: amq-streams
            namespace: "{{ project }}"
          spec:
            channel: stable
            name: amq-streams
            installPlanApproval: Manual
            source: redhat-operators
            sourceNamespace: openshift-marketplace
            startingCSV: amqstreams.v2.6.0-1
        wait: true
        wait_condition: 
          reason: AllCatalogSourcesHealthy
          status: false
          type: CatalogSourcesUnhealthy
        wait_timeout: 300

    - name: Search for cluster operator pod
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ project }}"
        label_selectors:
          - "name=amq-streams-cluster-operator"
        wait: yes
        wait_sleep: 10
        wait_timeout: 360

    - name: Create Kafka Cluster
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kafka.strimzi.io/v1beta2
          kind: Kafka
          metadata:
            name: "{{ cluster_name }}"
            namespace: "{{ project }}"
          spec:
            kafka:
              authorization:
                type: simple
              config:
                offsets.topic.replication.factor: 3
                transaction.state.log.replication.factor: 3
                transaction.state.log.min.isr: 2
                default.replication.factor: 3
                min.insync.replicas: 2
                inter.broker.protocol.version: '3.6'
                auto.create.topics.enable: 'true'
              storage:
                type: persistent-claim
                size: 5Gi
              listeners:
                - name: plain
                  port: 9092
                  type: internal
                  tls: false
                  configuration:
                    useServiceDnsDomain: true
                - name: tls
                  port: 9093
                  type: internal
                  tls: true
                  authentication:
                    type: tls
              version: 3.6.0
              replicas: 3
            entityOperator:
              topicOperator: {}
              userOperator: {}
            zookeeper:
              storage:
                type: persistent-claim
                size: 5Gi
              replicas: 3

    # - name: Create Kafka Topic
    #   kubernetes.core.k8s:
    #     state: present
    #     definition:
    #       apiVersion: kafka.strimzi.io/v1beta2
    #       kind: KafkaTopic
    #       metadata:
    #         name: topic-name-1
    #         namespace: "{{ project }}"
    #         labels:
    #           strimzi.io/cluster: my-cluster
    #       spec:
    #         topicName: topic-name-1

    - name: Extract the cluster CA certificate
      shell: oc get secret "{{ cluster_name }}"-cluster-ca-cert -n "{{ project }}" -o jsonpath='{.data.ca\.p12}' | base64 -d > ca.p12

    - name: Extract the cluster CA password
      shell: oc get secret "{{ cluster_name }}"-cluster-ca-cert -n "{{ project }}" -o jsonpath='{.data.ca\.password}' | base64 -d > ca.password