---
#
# Playbook to create a Tekton Pipeline for jboss-eap project
#
- name: Deploy JBoss EAP in OpenShift cluster
  hosts: localhost
  vars:
    project: "hello-jboss"
    webhook_password: "mywebhookpassword"
    gitrepo: "https://github.com/gmagnotta/examples"
    repocontext: "jboss-eap-test"
    hostname_http: "hello-jboss-project.localdomain"
    hostname_https: "secure-hello-jboss-project.localdomain"
    password: "password"
    database_username: "jboss"
    database_password: "jboss"
    database_name: "jboss"
    sso_public_key: ""
    sso_secret: "password"
    sso_url: "https://sso.localdomain/"
    sso_realm: "hello-jboss"
    sso_client: "hello-jboss"
    sso_username: ""
    sso_password: ""
    ocp_postgresql_service_host: "postgresql"
    ocp_postgresql_service_port: "5432"
    amq_service_host: "amqbroker"
    amq_service_port: "61616"
    mq_queues: "getTopItemsCommand,getTopOrdersCommand,createOrderCommand,invalidMessage"
    mq_username: "user"
    mq_password: "password"

  tasks:

    - name: Check if secret is linked
      shell: "oc get serviceaccount pipeline -n {{ project }} -o json | jq -r '.secrets[] | select(.name | test(\"redhatregistryio\")).name'"
      register: redhatregistryio

    - name: Link secret to pipeline
      command: "oc secrets link pipeline redhatregistryio -n {{ project }}"
      when: redhatregistryio.stdout == ""


    - name: Check if eap-ssl-secret is available
      command: "oc get secret eap-ssl-secret -n {{ project }} -o json"
      register: eapsslsecret
      ignore_errors: true

    - name: Generate https certificate
      command: "keytool -genkeypair -storepass {{ password }} -keypass {{ password }} -dname \"CN={{ hostname_https }}\" -alias https -storetype JKS -keyalg RSA -keystore eapkeystore.jks"
      when: eapsslsecret.failed == true

    - name: Import https certificate in OpenShift
      command: "oc create secret generic eap-ssl-secret -n {{ project }} --from-file=eapkeystore.jks"
      when: eapsslsecret.failed == true


    - name: Check if eap-jgroup-secret is available
      command: "oc get secret eap-jgroup-secret -n {{ project }} -o json"
      register: eapjgroupsecret
      ignore_errors: true

    - name: Generate jgroups key
      command: "keytool -genseckey -alias jgroups -storepass {{ password }} -keypass {{ password }} -storetype JCEKS -keyalg Blowfish -keysize 56 -keystore eapjgroups.jceks"
      when: eapjgroupsecret.failed == true

    - name: Import jgroups certificate in OpenShift
      command: "oc create secret generic eap-jgroup-secret -n {{ project }} --from-file=eapjgroups.jceks"
      when: eapjgroupsecret.failed == true


    - name: Create Secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: hello-jboss
            namespace: "{{ project }}"
          data:
            database-username: "{{ database_username | b64encode }}"
            database-password: "{{ database_password | b64encode }}"
            database-name: "{{ database_name | b64encode }}"
            sso-public-key: "{{ sso_public_key | b64encode }}"
            sso-secret: "{{ sso_secret | b64encode }}"
            sso-username: "{{ sso_username | b64encode }}"
            sso-password: "{{ sso_password | b64encode }}"
            https-password: "{{ password | b64encode }}"
            jgroups-encrypt-password: "{{ password | b64encode }}"
            jgroups-cluster-password: "{{ password | b64encode }}"
            mq-username: "{{ mq_username | b64encode }}"
            mq-password: "{{ mq_password | b64encode }}"

    - name: Create ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: hello-jboss
            namespace: "{{ project }}"
          data:
            enable-generate-default-datasource: 'false'
            sso-url: "{{ sso_url }}"
            sso-realm: "{{ sso_realm }}"
            sso-client: "{{ sso_client }}"
            sso-disable-ssl-certificate-validation: 'false'
            hostname-http: "{{ hostname_http }}"
            hostname-https: "{{ hostname_https }}"
            ocp-postgresql-service-host: "{{ ocp_postgresql_service_host }}"
            ocp-postgresql-service-port: "{{ ocp_postgresql_service_port }}"
            ds1-connection-checker: 'org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker'
            ds1-driver: 'postgresql'
            ds1-exception-sorter: 'org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter'
            ds1-max-pool-size: '20'
            ds1-min-pool-size: '20'
            ds1-nonxa: 'true'
            ab-prometheus-enable: 'true'
            auto-deploy-exploded: 'false'
            mq-queues: "{{ mq_queues }}"
            mq-topics: ''
            mq-jndi: 'java:jboss/DefaultJMSConnectionFactory'
            mq-serializable-packages: ''
            amq-service-host: "{{ amq_service_host }}"
            amq-service-port: "{{ amq_service_port }}"

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: eap74-openjdk11-openshift-rhel8
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true
            tags:
            - annotations:
                description: Red Hat JBoss EAP 7 Image
              from:
                kind: DockerImage
                name: registry.redhat.io/jboss-eap-7/eap74-openjdk11-openshift-rhel8:7.4.5
              name: latest
              referencePolicy:
                type: Local

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: flyway-openjdk11-openshift-rhel8
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true
            tags:
            - annotations:
                description: Flyway runtime Image
              from:
                kind: DockerImage
                name: quay.io/gmagnotta/flyway:latest
              name: latest
              referencePolicy:
                type: Local
    
    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: hello-jboss
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: hello-jboss-migration
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: hello-jboss-s2ienvironment
            namespace: "{{ project }}"
          data:
            env: |
              #GALLEON_PROVISION_DEFAULT_FAT_SERVER=false
              #MAVEN REPO TO PUSH ARTIFACTS TO
              #MAVEN_REPOS=nexus
              #NEXUS_MAVEN_REPO_ID=nexus
              #NEXUS_MAVEN_REPO_URL=http://nexus3:8081
              #NEXUS_MAVEN_REPO_USERNAME=myuser
              #NEXUS_MAVEN_REPO_PASSWORD=mypass
              #MAVEN MIRROR
              #MAVEN_MIRRORS=dev
              #DEV_MAVEN_MIRROR_ID=nexus
              #DEV_MAVEN_MIRROR_URL=http://nexus3:8081/repository/maven-group/
              #DEV_MAVEN_MIRROR_OF=<![CDATA[*]]>



    - name: Create Pipeline
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          metadata:
            name: hello-jboss
            namespace: "{{ project }}"
          spec:
            workspaces:
              - name: src
              - name: env
              - name: secureenv
              - name: artifacts
            tasks:
              - name: fetch-repository
                taskRef:
                  name: git-clone
                  kind: ClusterTask
                workspaces:
                  - name: output
                    workspace: src
                params:
                  - name: url
                    value: "{{ gitrepo }}"
                  - name: deleteExisting
                    value: "true"
              - name: build-jboss
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/eap74-openjdk11-openshift-rhel8:latest"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-jboss"
                  - name: PATH_CONTEXT
                    value: "{{ repocontext }}"
              - name: build-migration
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/flyway-openjdk11-openshift-rhel8:latest"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-jboss-migration"
                  - name: PATH_CONTEXT
                    value: "{{ repocontext }}/src/main/resources/db"
              - name: deploy
                taskRef:
                  name: openshift-client
                  kind: ClusterTask
                runAfter:
                  - build-jboss
                  - build-migration
                workspaces:
                  - name: manifest-dir
                    workspace: src
                params:
                  - name: SCRIPT
                    value: |
                      cd $(workspaces.manifest-dir.path)/{{ repocontext }}/k8s/overlay/dev
                      
                      cat <<EOF > kustomization.yaml
                      apiVersion: kustomize.config.k8s.io/v1beta1
                      kind: Kustomization

                      resources:
                      - ../../base

                      patches:
                      - path: ./patch-deployment.yaml
                        target:
                          kind: Deployment
                          name: "hello-jboss"
                      - path: ./patch-job.yaml
                        target:
                          kind: Job
                          name: "hello-jboss-migration"
                      EOF

                      cat <<EOF > patch-deployment.yaml
                      apiVersion: apps/v1
                      kind: Deployment
                      metadata:
                        name: hello-jboss
                      spec:
                        template:
                          spec:
                            containers:
                              - name: hello-jboss
                                image: $(tasks.build-jboss.results.IMAGE_URL)@$(tasks.build-jboss.results.IMAGE_DIGEST)
                            initContainers:
                              - name: hello-jboss-wait-migration
                                image: $(tasks.build-migration.results.IMAGE_URL)@$(tasks.build-migration.results.IMAGE_DIGEST)
                      EOF

                      cat <<EOF > patch-job.yaml
                      apiVersion: batch/v1
                      kind: Job
                      metadata:
                        name: hello-jboss-migration
                      spec:
                        template:
                          spec:
                            containers:
                              - name: hello-jboss-migration
                                image: $(tasks.build-migration.results.IMAGE_URL)@$(tasks.build-migration.results.IMAGE_DIGEST)
                      EOF

                      oc apply -k .

    - name: Create Pipeline
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          metadata:
            name: hello-jboss-secure
            namespace: "{{ project }}"
          spec:
            workspaces:
              - name: src
              - name: env
              - name: secureenv
              - name: artifacts
            tasks:
              - name: fetch-repository
                taskRef:
                  name: git-clone
                  kind: ClusterTask
                workspaces:
                  - name: output
                    workspace: src
                params:
                  - name: url
                    value: '{{ gitrepo }}'
                  - name: deleteExisting
                    value: "true"
              - name: build-jboss
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/eap74-openjdk11-openshift-rhel8:latest"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-jboss"
                  - name: PATH_CONTEXT
                    value: "{{ repocontext }}"
              - name: build-migration
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/flyway-openjdk11-openshift-rhel8:latest"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-jboss-migration"
                  - name: PATH_CONTEXT
                    value: "{{ repocontext }}/src/main/resources/db"
              - name: vuln-scan
                taskRef:
                  name: vulnerability-scan
                runAfter:
                  - build-jboss
                params:
                  - name: IMAGETOSCAN
                    value: "$(tasks.build-jboss.results.IMAGE_URL)@$(tasks.build-jboss.results.IMAGE_DIGEST)"
              - name: vuln-scan-flyway
                taskRef:
                  name: vulnerability-scan
                runAfter:
                  - build-migration
                params:
                  - name: IMAGETOSCAN
                    value: "$(tasks.build-migration.results.IMAGE_URL)@$(tasks.build-migration.results.IMAGE_DIGEST)"
              - name: deploy
                taskRef:
                  name: openshift-client
                  kind: ClusterTask
                runAfter:
                  - vuln-scan
                  - vuln-scan-flyway
                workspaces:
                  - name: manifest-dir
                    workspace: src
                params:
                  - name: SCRIPT
                    value: |
                      cd $(workspaces.manifest-dir.path)/{{ repocontext }}/k8s/overlay/dev
                      
                      cat <<EOF > kustomization.yaml
                      apiVersion: kustomize.config.k8s.io/v1beta1
                      kind: Kustomization

                      resources:
                      - ../../base

                      patches:
                      - path: ./patch-deployment.yaml
                        target:
                          kind: Deployment
                          name: "hello-jboss"
                      - path: ./patch-job.yaml
                        target:
                          kind: Job
                          name: "hello-jboss-migration"
                      EOF

                      cat <<EOF > patch-deployment.yaml
                      apiVersion: apps/v1
                      kind: Deployment
                      metadata:
                        name: hello-jboss
                      spec:
                        template:
                          spec:
                            containers:
                              - name: hello-jboss
                                image: $(tasks.build-jboss.results.IMAGE_URL)@$(tasks.build-jboss.results.IMAGE_DIGEST)
                            initContainers:
                              - name: hello-jboss-wait-migration
                                image: $(tasks.build-migration.results.IMAGE_URL)@$(tasks.build-migration.results.IMAGE_DIGEST)
                      EOF

                      cat <<EOF > patch-job.yaml
                      apiVersion: batch/v1
                      kind: Job
                      metadata:
                        name: hello-jboss-migration
                      spec:
                        template:
                          spec:
                            containers:
                              - name: hello-jboss-migration
                                image: $(tasks.build-migration.results.IMAGE_URL)@$(tasks.build-migration.results.IMAGE_DIGEST)
                      EOF

                      oc apply -k .

    - name: Create TriggerBinding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: TriggerBinding
          metadata:
            name: event-binding
            namespace: "{{ project }}"
          spec:
            params:
              - name: git-repository-url
                value: $(body.repository.url) # use $(body.repository.clone_url) for gitea see https://docs.gitea.com/usage/webhooks#event-information

    - name: Create TriggerTemplate
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: TriggerTemplate
          metadata:
            name: push-trigger-template
            namespace: "{{ project }}"
          spec:
            params:
            - name: git-repository-url
              description: The git repository url
            resourcetemplates:
            - apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                generateName: hello-jboss-
              spec:
                pipelineRef:
                  name: hello-jboss
                workspaces:
                  - name: src
                    volumeClaimTemplate:
                      spec:
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: 1Gi
                        storageClassName: ocs-external-storagecluster-ceph-rbd
                        volumeMode: Filesystem
                      status: {}
                  - configMap:
                      name: hello-jboss-s2ienvironment
                    name: env
                  - emptyDir: {}
                    name: secureenv
                  - name: artifacts
                    emptyDir: {}

    - name: Create EventListener
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: EventListener
          metadata:
            name: listener
            namespace: "{{ project }}"
          spec:
            serviceAccountName: pipeline
            triggers:
              - name: trigger
                interceptors:
                  - ref:
                      name: "github"
                      kind: ClusterInterceptor
                      apiVersion: triggers.tekton.dev
                    params:
                    - name: "secretRef"
                      value:
                        secretName: git-secret
                        secretKey: secretToken
                    - name: "eventTypes"
                      value: ["push"]
                bindings:
                  - ref: event-binding    
                template:
                  ref: push-trigger-template

    - name: Create Secret
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: git-secret
            namespace: "{{ project }}"
          data:
            secretToken: "{{ webhook_password | b64encode }}"

    - name: Create Route
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              app.kubernetes.io/managed-by: EventListener
              app.kubernetes.io/part-of: Triggers
              eventlistener: listener
            name: el-listener
            namespace: "{{ project }}"
          spec:
            port:
              targetPort: http-listener
            to:
              kind: Service
              name: el-listener
              weight: 100
