---
#
# Playbook to create a Tekton Pipeline for jboss-eap project
#
- name: Deploy Tomcat in OpenShift cluster
  hosts: localhost
  vars:
    project: "hello-jboss"
    webhook_password: "mywebhookpassword"
  tasks:

    - name: Link secret to pipeline
      command: "oc secrets link pipeline redhatregistryio -n {{ project }}"

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: eap74-openjdk11-openshift-rhel8
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true
            tags:
            - annotations:
                description: Red Hat JBoss EAP 7 Image
              from:
                kind: DockerImage
                name: registry.redhat.io/jboss-eap-7/eap74-openjdk11-openshift-rhel8:7.4.5
              name: latest
              referencePolicy:
                type: Local

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: eap74-openjdk11-runtime-openshift-rhel8
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true
            tags:
            - annotations:
                description: Red Hat JBoss EAP 7 runtime Image
              from:
                kind: DockerImage
                name: registry.redhat.io/jboss-eap-7/eap74-openjdk11-runtime-openshift-rhel8
              name: latest
              referencePolicy:
                type: Local
    
    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: hello-jboss
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: flyway
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create ImageStream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: hello-jboss-migration
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    - name: Create ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: hello-jboss-s2ienvironment
            namespace: "{{ project }}"
          data:
            env: |
              #GALLEON_PROVISION_DEFAULT_FAT_SERVER=false
              #MAVEN REPO TO PUSH ARTIFACTS TO
              #MAVEN_REPOS=nexus
              #NEXUS_MAVEN_REPO_ID=nexus
              #NEXUS_MAVEN_REPO_URL=http://nexus3:8081
              #NEXUS_MAVEN_REPO_USERNAME=myuser
              #NEXUS_MAVEN_REPO_PASSWORD=mypass
              #MAVEN MIRROR
              #MAVEN_MIRRORS=dev
              #DEV_MAVEN_MIRROR_ID=nexus
              #DEV_MAVEN_MIRROR_URL=http://nexus3:8081/repository/maven-group/
              #DEV_MAVEN_MIRROR_OF=<![CDATA[*]]>

    - name: Create Pipeline
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          metadata:
            name: hello-jboss
            namespace: "{{ project }}"
          spec:
            params:
              - name: repo-url
            workspaces:
              - name: src
              - name: env
              - name: secureenv
              - name: artifacts
            tasks:
              - name: fetch-repository
                taskRef:
                  name: git-clone
                  kind: ClusterTask
                workspaces:
                  - name: output
                    workspace: src
                params:
                  - name: url
                    value: $(params.repo-url)
                  - name: deleteExisting
                    value: "true"
              - name: build
                taskRef:
                  name: buildah-s2i
                runAfter:
                  - fetch-repository
                workspaces:
                  - name: source
                    workspace: src
                  - name: environment
                    workspace: env
                  - name: secureenvironment
                    workspace: secureenv
                  - name: artifacts
                    workspace: artifacts
                params:
                  - name: BUILDER_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/eap74-openjdk11-openshift-rhel8:latest"
                  - name: TLSVERIFY
                    value: "false"
                  - name: OUTPUT_IMAGE
                    value: "image-registry.openshift-image-registry.svc:5000/{{ project }}/hello-jboss"
                  - name: PATH_CONTEXT
                    value: "jboss-eap-test"
                  - name: INCREMENTAL
                    value: "true"

    - name: Create TriggerBinding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: TriggerBinding
          metadata:
            name: event-binding
            namespace: "{{ project }}"
          spec:
            params:
              - name: git-repository-url
                value: $(body.repository.url) # use $(body.repository.clone_url) for gitea see https://docs.gitea.com/usage/webhooks#event-information

    - name: Create TriggerTemplate
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: TriggerTemplate
          metadata:
            name: push-trigger-template
            namespace: "{{ project }}"
          spec:
            params:
            - name: git-repository-url
              description: The git repository url
            resourcetemplates:
            - apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                generateName: hello-jboss-
              spec:
                params:
                  - name: repo-url
                    value: 'https://github.com/gmagnotta/examples'
                pipelineRef:
                  name: hello-jboss
                workspaces:
                  - name: src
                    volumeClaimTemplate:
                      spec:
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: 1Gi
                        storageClassName: ocs-external-storagecluster-ceph-rbd
                        volumeMode: Filesystem
                      status: {}
                  - emptyDir: {}
                    name: env
                  - emptyDir: {}
                    name: secureenv
                  - name: artifacts
                    volumeClaimTemplate:
                      spec:
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: 1Gi
                        storageClassName: ocs-external-storagecluster-ceph-rbd
                        volumeMode: Filesystem
                      status: {}

    - name: Create EventListener
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: triggers.tekton.dev/v1alpha1
          kind: EventListener
          metadata:
            name: listener
            namespace: "{{ project }}"
          spec:
            serviceAccountName: pipeline
            triggers:
              - name: trigger
                interceptors:
                  - ref:
                      name: "github"
                      kind: ClusterInterceptor
                      apiVersion: triggers.tekton.dev
                    params:
                    - name: "secretRef"
                      value:
                        secretName: git-secret
                        secretKey: secretToken
                    - name: "eventTypes"
                      value: ["push"]
                bindings:
                  - ref: event-binding    
                template:
                  ref: push-trigger-template

    - name: Create Secret
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: git-secret
            namespace: "{{ project }}"
          data:
            secretToken: "{{ webhook_password | b64encode }}"

    - name: Create Route
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              app.kubernetes.io/managed-by: EventListener
              app.kubernetes.io/part-of: Triggers
              eventlistener: listener
            name: el-listener
            namespace: "{{ project }}"
          spec:
            port:
              targetPort: http-listener
            to:
              kind: Service
              name: el-listener
              weight: 100