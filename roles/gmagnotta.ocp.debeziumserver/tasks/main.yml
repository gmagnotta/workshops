---
- name: Define container image for imagestream
  ansible.builtin.set_fact:
    debezium_image: debezium:2.7
  when: debezium_use_imagestream

- name: Define container image for debeziumserver
  ansible.builtin.set_fact:
    debezium_image: docker.io/debezium/server@sha256:f9cec4893e40f66de78d582821d67b2616957ac56aa2af46657b1f605e80f763
  when: not debezium_use_imagestream

- name: Create PersistentVolumeClaim
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ application_name }}-pvc"
        namespace: "{{ project }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ volume_capacity }}"
  when: debezium_persistent

- name: Create ConfigMap
  kubernetes.core.k8s:
    state: present
    template: application.properties.j2

- name: Create ImageStream
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: image.openshift.io/v1
      kind: ImageStream
      metadata:
        name: debezium
        namespace: "{{ project }}"
      spec:
        lookupPolicy:
          local: true
        tags:
          - annotations:
              description: Debezium server
            from:
              kind: DockerImage
              name: "docker.io/debezium/server@sha256:f9cec4893e40f66de78d582821d67b2616957ac56aa2af46657b1f605e80f763"
            name: "2.7"
            referencePolicy:
              type: Local
  when: debezium_use_imagestream

- name: Create Persistent Deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ application_name }}"
        namespace: "{{ project }}"
        labels:
          app: "{{ application_name }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ application_name }}"
        template:
          metadata:
            labels:
              app: "{{ application_name }}"
            annotations:
              alpha.image.policy.openshift.io/resolve-names: '*'
          spec:
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: "{{ application_name }}-pvc"
              - name: applicationproperties
                configMap:
                  name: application.properties
                  items:
                  - key: "application.properties"
                    path: application.properties
            containers:
              - name: debezium
                image: "{{ debezium_image }}"
                volumeMounts:
                  - mountPath: /debezium/data
                    name: data
                  - mountPath: /debezium/conf
                    name: applicationproperties
                    readOnly: true
                resources: {}
                imagePullPolicy: IfNotPresent
        strategy:
          type: Recreate
        revisionHistoryLimit: 10
        progressDeadlineSeconds: 600
  when: debezium_persistent

- name: Create Stateless Deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ application_name }}"
        namespace: "{{ project }}"
        labels:
          app: "{{ application_name }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ application_name }}"
        template:
          metadata:
            labels:
              app: "{{ application_name }}"
            annotations:
              alpha.image.policy.openshift.io/resolve-names: '*'
          spec:
            volumes:
              - name: applicationproperties
                configMap:
                  name: application.properties
                  items:
                  - key: "application.properties"
                    path: application.properties
            containers:
              - name: debezium
                image: "{{ debezium_image }}"
                volumeMounts:
                  - mountPath: /debezium/conf
                    name: applicationproperties
                    readOnly: true
                resources: {}
                imagePullPolicy: IfNotPresent
        strategy:
          type: Recreate
        revisionHistoryLimit: 10
        progressDeadlineSeconds: 600
  when: not debezium_persistent
