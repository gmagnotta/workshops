---
- name: Define container image for imagestream
  ansible.builtin.set_fact:
    postgresql_image: postgresql-10:10-el8
  when: postgresql_use_imagestream

- name: Define container image for postgresql
  ansible.builtin.set_fact:
    postgresql_image: registry.redhat.io/rhel8/postgresql-10:1-232
  when: not postgresql_use_imagestream

- name: Create PersistentVolumeClaim
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ postgresql_application_name }}-pvc"
        namespace: "{{ project }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ postgresql_volume_capacity }}"
  when: postgresql_persistent

- name: Create ConfigMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ postgresql_application_name }}"
        namespace: "{{ project }}"
      data:
        postgresql-max-prepared-transactions: ''
        postgresql-max-connections: ''
        postgresql-shared-buffers: ''

- name: Create Secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ postgresql_application_name }}"
        namespace: "{{ project }}"
      data:
        postgresql-database: "{{ postgresql.database | b64encode }}"
        postgresql-user: "{{ postgresql.user | b64encode }}"
        postgresql-password: "{{ postgresql.password  | b64encode}}"

- name: Create ImageStream
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: image.openshift.io/v1
      kind: ImageStream
      metadata:
        name: postgresql-10
        namespace: "{{ project }}"
      spec:
        lookupPolicy:
          local: true
        tags:
          - annotations:
              description: Provides a PostgreSQL 10 database on RHEL 8. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/README.md.
            from:
              kind: DockerImage
              name: "registry.redhat.io/rhel8/postgresql-10:1-232"
            name: 10-el8
            referencePolicy:
              type: Local
  when: postgresql_use_imagestream

- name: Create Persistent Deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ postgresql_application_name }}"
        namespace: "{{ project }}"
        labels:
          app: "{{ postgresql_application_name }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ postgresql_application_name }}"
        template:
          metadata:
            labels:
              app: "{{ postgresql_application_name }}"
            annotations:
              alpha.image.policy.openshift.io/resolve-names: '*'
          spec:
            volumes:
              - name: pgdata
                persistentVolumeClaim:
                  claimName: "{{ postgresql_application_name }}-pvc"
            containers:
              - name: postgresql
                image: "{{ postgresql_image }}"
                ports:
                  - containerPort: 5432
                    protocol: TCP
                env:
                  - name: POSTGRESQL_USER
                    valueFrom:
                      secretKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-user
                  - name: POSTGRESQL_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-password
                  - name: POSTGRESQL_DATABASE
                    valueFrom:
                      secretKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-database
                  - name: POSTGRESQL_MAX_CONNECTIONS
                    valueFrom:
                      configMapKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-max-connections
                  - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
                    valueFrom:
                      configMapKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-max-prepared-transactions
                  - name: POSTGRESQL_SHARED_BUFFERS
                    valueFrom:
                      configMapKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-shared-buffers
                readinessProbe:
                  timeoutSeconds: 10
                  initialDelaySeconds: 30
                  successThreshold: 1
                  failureThreshold: 3
                  exec:
                    command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - psql -h 127.0.0.1 -U $PGUSER -q -d $PGUSER -c 'SELECT 1'
                livenessProbe:
                  timeoutSeconds: 10
                  initialDelaySeconds: 90
                  successThreshold: 1
                  failureThreshold: 3
                  tcpSocket:
                    port: 5432
                volumeMounts:
                  - mountPath: /var/lib/pgsql/data
                    name: pgdata
                resources: {}
                imagePullPolicy: IfNotPresent
        strategy:
          type: Recreate
        revisionHistoryLimit: 10
        progressDeadlineSeconds: 600
  when: postgresql_persistent

- name: Create Stateless Deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ postgresql_application_name }}"
        namespace: "{{ project }}"
        labels:
          app: "{{ postgresql_application_name }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ postgresql_application_name }}"
        template:
          metadata:
            labels:
              app: "{{ postgresql_application_name }}"
            annotations:
              alpha.image.policy.openshift.io/resolve-names: '*'
          spec:
            containers:
              - name: postgresql
                image: "{{ postgresql_image }}"
                ports:
                  - containerPort: 5432
                    protocol: TCP
                env:
                  - name: POSTGRESQL_USER
                    valueFrom:
                      secretKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-user
                  - name: POSTGRESQL_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-password
                  - name: POSTGRESQL_DATABASE
                    valueFrom:
                      secretKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-database
                  - name: POSTGRESQL_MAX_CONNECTIONS
                    valueFrom:
                      configMapKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-max-connections
                  - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
                    valueFrom:
                      configMapKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-max-prepared-transactions
                  - name: POSTGRESQL_SHARED_BUFFERS
                    valueFrom:
                      configMapKeyRef:
                        name: "{{ postgresql_application_name }}"
                        key: postgresql-shared-buffers
                readinessProbe:
                  timeoutSeconds: 10
                  initialDelaySeconds: 30
                  successThreshold: 1
                  failureThreshold: 3
                  exec:
                    command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - psql -h 127.0.0.1 -U $PGUSER -q -d $PGUSER -c 'SELECT 1'
                livenessProbe:
                  timeoutSeconds: 10
                  initialDelaySeconds: 90
                  successThreshold: 1
                  failureThreshold: 3
                  tcpSocket:
                    port: 5432
                resources: {}
                imagePullPolicy: IfNotPresent
        strategy:
          type: Recreate
        revisionHistoryLimit: 10
        progressDeadlineSeconds: 600
  when: not postgresql_persistent

- name: Create Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ postgresql_application_name }}"
        namespace: "{{ project }}"
        labels:
          app: "{{ postgresql_application_name }}"
      spec:
        ports:
          - name: 5432-tcp
            protocol: TCP
            port: 5432
            targetPort: 5432
        selector:
          app: "{{ postgresql_application_name }}"
        type: ClusterIP
        sessionAffinity: None

# Grant view role permission to a user
# oc adm policy add-role-to-user view <user> -n <project>

# Grang view role permission to a group
# oc adm policy add-role-to-group view <group> -n <project>

# view - This role allows read-only access within a given namespace. It does not allow viewing or modifying of roles or role bindings. 
# edit - This role grants read/write access within a given Kubernetes namespace. It cannot view or modify roles or role bindings.
# admin - This role permits unlimited read/write access to resources within a namespace. This role can create roles and role bindings within a particular namespace. It does not permit write access to the namespace itself.
# cluster-admin - This “superuser” can perform any action on any resource in a cluster. You can use this in a ClusterRoleBinding to grant full control over every resource in the cluster (and in all namespaces) or in a RoleBinding to grant full control over every resource in the respective namespace.