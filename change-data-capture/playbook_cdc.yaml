---
#
# Playbook to create an installation of kafkaConnect plus Debezium
#
# see https://github.com/strimzi/strimzi-kafka-operator/blob/main/examples/security/tls-auth/connect.yaml
# see https://access.redhat.com/documentation/en-us/red_hat_build_of_debezium/2.3.4/html-single/debezium_user_guide/index#descriptions-of-debezium-postgresql-connector-configuration-properties
#
- name: Deploy kafkaConnect plus Debezium in OpenShift cluster
  hosts: localhost
  vars:
    project: "kafka"
    postgresql_host: "postgresql.hello-jboss.svc.cluster.local"
    postgresql_username: "jboss"
    postgresql_password: "jboss"
    postgresql_dbname: "jboss"
    postgresql_include_list: "public.orders, public.line_items, public.items"
  tasks:

    # Generates an user for Debezium
    - name: Create Kafka User for Debezium
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kafka.strimzi.io/v1beta2
          kind: KafkaUser
          metadata:
            name: debezium
            namespace: "{{ project }}"
            labels:
              strimzi.io/cluster: my-cluster
          spec:
            authentication:
              type: tls
            authorization:
              type: simple
              acls:
                - resource:
                    type: topic
                    name: debezium-cluster-offsets
                    patternType: literal
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: debezium-cluster-configs
                    patternType: literal
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: debezium-cluster-status
                    patternType: literal
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: jboss.public.line_items
                    patternType: literal
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: jboss.public.items
                    patternType: literal
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: jboss.public.orders
                    patternType: literal
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: group
                    name: debezium
                    patternType: literal
                  operations:
                    - Read
                  host: "*"

    - name: Create Image Stream
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: my-connect-cluster
            namespace: "{{ project }}"
          spec:
            lookupPolicy:
              local: true

    # Creates a Kafka Connect Cluster
    - name: Create Kafka Connect Cluster
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kafka.strimzi.io/v1beta2
          kind: KafkaConnect 
          metadata:
            name: my-connect-cluster
            namespace: "{{ project }}"
            annotations:
              strimzi.io/use-connector-resources: "true" 
          spec:
            version: 3.5.0
            replicas: 1
            bootstrapServers: my-cluster-kafka-bootstrap:9093
            tls:
              trustedCertificates:
                - secretName: my-cluster-cluster-ca-cert
                  certificate: ca.crt
            authentication:
              type: tls
              certificateAndKey:
                secretName: debezium
                certificate: user.crt
                key: user.key
            config:
              group.id: debezium
              offset.storage.topic: debezium-cluster-offsets
              config.storage.topic: debezium-cluster-configs
              status.storage.topic: debezium-cluster-status
              topic.creation.enable: true
            build: 
              output: 
                type: imagestream
                image: my-connect-cluster:latest
              plugins: 
                - name: debezium-postgres-connector
                  artifacts:
                    - type: zip
                      url: https://maven.repository.redhat.com/ga/io/debezium/debezium-connector-postgres/2.3.4.Final-redhat-00001/debezium-connector-postgres-2.3.4.Final-redhat-00001-plugin.zip

    # Inject this configuration in the Kafka Connect to start reading from db
    - name: Create Kafka Connector with Debezium
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kafka.strimzi.io/v1beta2
          kind: KafkaConnector
          metadata:
            labels:
              strimzi.io/cluster: my-connect-cluster
            name: inventory-connector-postgresql
            namespace: "{{ project }}"
          spec:
            class: io.debezium.connector.postgresql.PostgresConnector
            tasksMax: 1  
            config:
              topic.prefix: jboss
              database.hostname: "{{ postgresql_host }}"
              database.port: 5432
              database.user: "{{ postgresql_username }}"
              database.password: "{{ postgresql_password }}"
              database.dbname: "{{ postgresql_dbname }}"
              database.server.name: dbserver1
              schema.include.list: public
              table.include.list: "{{ postgresql_include_list }}"
              tombstones.on.delete: false
              plugin.name: pgoutput
              transforms: unwrap
              transforms.unwrap.type: io.debezium.transforms.ExtractNewRecordState
              transforms.unwrap.drop.tombstones: false
              transforms.unwrap.add.headers: op
              key.converter: org.apache.kafka.connect.json.JsonConverter
              key.converter.schemas.enable: false
              value.converter: org.apache.kafka.connect.json.JsonConverter
              value.converter.schemas.enable: false

    - name: Create Kafka User for Stream Processing
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kafka.strimzi.io/v1beta2
          kind: KafkaUser
          metadata:
            name: streams
            namespace: "{{ project }}"
            labels:
              strimzi.io/cluster: my-cluster
          spec:
            authentication:
              type: tls
            authorization:
              type: simple
              acls:
                - resource:
                    type: topic
                    name: jboss
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                  host: "*"
                - resource:
                    type: topic
                    name: streams
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: outbox.event.OrderCreated
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: topItems
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: topic
                    name: topOrders
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                    - Write
                    - Create
                  host: "*"
                - resource:
                    type: group
                    name: streams
                    patternType: literal
                  operations:
                    - Read
                  host: "*"

    - name: Create Kafka User to read aggregated data
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kafka.strimzi.io/v1beta2
          kind: KafkaUser
          metadata:
            name: consumer
            namespace: "{{ project }}"
            labels:
              strimzi.io/cluster: my-cluster
          spec:
            authentication:
              type: tls
            authorization:
              type: simple
              acls:
                - resource:
                    type: topic
                    name: jboss
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                  host: "*"
                - resource:
                    type: topic
                    name: outbox.event.OrderCreated
                    patternType: prefix
                  operations:
                    - Describe
                    - Read
                  host: "*"
                - resource:
                    type: group
                    name: consumer
                    patternType: literal
                  operations:
                    - Read
                  host: "*"

    - name: Extract the user debezium certificate
      shell: oc get secret debezium -n "{{ project }}" -o jsonpath='{.data.user\.p12}' | base64 -d > /tmp/debezium.p12

    - name: Extract the user debezium password
      shell: oc get secret debezium -n "{{ project }}" -o jsonpath='{.data.user\.password}' | base64 -d > /tmp/debezium.password


    - name: Extract the user streams certificate
      shell: oc get secret streams -n "{{ project }}" -o jsonpath='{.data.user\.p12}' | base64 -d > /tmp/streams.p12

    - name: Extract the user streams password
      shell: oc get secret streams -n "{{ project }}" -o jsonpath='{.data.user\.password}' | base64 -d > /tmp/streams.password


    - name: Extract the user consumer certificate
      shell: oc get secret consumer -n "{{ project }}" -o jsonpath='{.data.user\.p12}' | base64 -d > /tmp/consumer.p12

    - name: Extract the user consumer password
      shell: oc get secret consumer -n "{{ project }}" -o jsonpath='{.data.user\.password}' | base64 -d > /tmp/consumer.password